import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import { buildClient } from "../../../privy-client";
import PrivyData from "privy-js";
import { formatUserData, UserData, UserDataResponse } from "../../../shared";
import { UserData as PrivyUserData, PrivyError, Session } from "privy-js";
import { useSession, SignOutLink } from "../../../components/session";

const isBlank = (s: string | null | void) => s != null && s.trim() === "";
const isPresent = (s: string | null | void) => !isBlank(s);

type PropsType = {
  userId: string;
  requesterId: string;
  roles: string;
  privy: InstanceType<typeof PrivyData>;
};

function EditUserState(props: PropsType) {
  const router = useRouter();
  const session = useSession() as Session;

  const [privy, setPrivy] = useState<InstanceType<typeof PrivyData> | null>(
    null
  );

  const [userData, setUserData] = useState<UserData>({});

  function submitEnabled() {
    return Object.values(userData).every(isPresent);
  }

  function updateUserData(data: Partial<UserData>) {
    setUserData({ ...userData, ...data });
  }

  // Instantiate client and fetch user data on page load
  useEffect(() => {
    // For the purpose of this demo, clients tell the server who the requester
    // is and what roles they have. However, in real-world settings, the server
    // would assign permissions / roles appropriately based on the currently
    // logged in user and what access they should have.
    const privy = buildClient(session);

    // Cache privy client instance for subsequent use
    setPrivy(privy);

    const onFetchDataSuccess = async (userDataResponse: PrivyUserData[]) => {
      const userData = formatUserData(userDataResponse as UserDataResponse[]);
      updateUserData(userData);
    };

    const onFetchDataFailure = (error: PrivyError) => {
      console.log(error);
    };

    privy.fetchData(props.userId).then(onFetchDataSuccess, onFetchDataFailure);
  }, []);

  async function saveUserData() {
    if (privy === null) {
      return;
    }

    try {
      await privy.saveData(props.userId, [
        {
          field_id: "name",
          data: userData.name as string,
        },
        {
          field_id: "username",
          data: userData.username as string,
        },
        {
          field_id: "email",
          data: userData.email as string,
        },
        {
          field_id: "website",
          data: userData.website as string,
        },
        {
          field_id: "bio",
          data: userData.bio as string,
        },
        {
          field_id: "avatar",
          data_type: "file",
          data: userData.avatar as string, // avatar is the file id of the uploaded file
        },
      ]);

      router.push(`/users/${props.userId}${window.location.search}`);
    } catch (e) {
      console.log(e);
    }
  }

  async function uploadAvatar(file: File) {
    if (privy === null) {
      return;
    }

    try {
      const uploadedFile = await privy.upload(props.userId, "avatar", file);
      updateUserData({ avatar: uploadedFile.id });
    } catch (e) {
      console.log(e);
    }
  }

  return (
    <EditUser
      userId={props.userId}
      userData={userData}
      onUpdate={updateUserData}
      onAvatarUpdate={uploadAvatar}
      submitEnabled={submitEnabled()}
      onSubmit={saveUserData}
    />
  );
}

function EditUser(props: {
  userId: string;
  userData: UserData;
  onUpdate: (state: Partial<UserData>) => void;
  onAvatarUpdate: (avatar: File) => void;
  submitEnabled: boolean;
  onSubmit: () => void;
}) {
  return (
    <div>
      <Head>
        <title>Privy Demo - User Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <header>
          <h1>Privy Demo</h1>
          <nav>
            <a href="/">Home</a>
            <SignOutLink />
          </nav>
        </header>

        <div className="page-header">
          <Image
            src="/privy-logo.png"
            alt="Vercel Logo"
            width={48}
            height={48}
          />
          <h2 className="title">User Profile</h2>
        </div>

        <div>
          <div className="privy-field-group">
            <div className="privy-field">
              <label htmlFor="name">Name</label>
              <input
                className="input is-normal"
                type="text"
                id="name"
                placeholder="Jane doe"
                value={props.userData.name}
                onChange={(e) => props.onUpdate({ name: e.target.value })}
              />
            </div>
            <div className="privy-field">
              <label htmlFor="username">Username</label>
              <input
                className="input is-normal"
                type="text"
                id="username"
                placeholder="janedoe"
                value={props.userData.username}
                onChange={(e) => props.onUpdate({ username: e.target.value })}
              />
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field">
              <label htmlFor="email">Email</label>
              <input
                className="input is-normal"
                type="text"
                id="email"
                placeholder="jane@doe.com"
                value={props.userData.email}
                onChange={(e) => props.onUpdate({ email: e.target.value })}
              />
            </div>
            <div className="privy-field">
              <label htmlFor="website">Website</label>
              <input
                className="input is-normal"
                type="text"
                id="website"
                placeholder="http://example.com"
                value={props.userData.website}
                onChange={(e) => props.onUpdate({ website: e.target.value })}
              />
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field-full">
              <label htmlFor="bio">Bio</label>
              <textarea
                id="bio"
                className="textarea"
                placeholder="Tell us about yourself"
                value={props.userData.bio}
                onChange={(e) => props.onUpdate({ bio: e.target.value })}
              ></textarea>
            </div>
          </div>

          <FileUploadFormField onAvatarUpdate={props.onAvatarUpdate} />

          <div className="privy-field-group">
            <button
              className={props.submitEnabled ? "button is-primary" : "button"}
              id="submit"
              disabled={!props.submitEnabled}
              onClick={(e) => {
                e.preventDefault();
                props.onSubmit();
              }}
            >
              Submit
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}

function FileUploadFormField(props: {
  onAvatarUpdate: (avatar: File) => void;
}) {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [avatar, setAvatar] = useState<File | null>(null);

  const onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileList = e.target.files || new FileList();
    const file = fileList[0] || null;
    setAvatar(file);
    if (file !== null) {
      setIsLoading(true);
      await props.onAvatarUpdate(file);
      setIsLoading(false);
    } else {
      setIsLoading(false);
    }
  };

  return (
    <div className="privy-field-group">
      <div className="privy-field">
        <p>User avatar</p>
        <div className="file has-name">
          <label className="file-label">
            <input
              className="file-input"
              type="file"
              id="avatar"
              onChange={onChange}
            />
            <span className="file-cta">
              <span className="file-icon">
                <i className="fas fa-upload"></i>
              </span>
              <span className="file-label">
                {avatar != null ? "File chosen" : "Choose a fileâ€¦"}
              </span>
            </span>
            <span className="file-name">
              {avatar !== null ? avatar.name : "No file chosen"}
            </span>
          </label>
        </div>
        {isLoading ? (
          <div className="upload-progress">
            <progress
              className="progress is-small is-primary"
              max="100"
            ></progress>
          </div>
        ) : null}
      </div>
    </div>
  );
}

function EditUserPage(props: any) {
  const router = useRouter();
  const id = router.query.id;

  if (typeof id !== "string") {
    return null;
  }

  return (
    <EditUserState
      {...props}
      userId={id}
      requesterId={router.query.requester_id}
      roles={router.query.roles}
    />
  );
}

export default EditUserPage;
