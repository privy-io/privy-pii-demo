import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import { buildClient } from "../../../privy-client";
import { UserData } from "../../../shared";
import { FieldInstance } from "@privy-io/privy-js";

type PropsType = {
  userId: string;
  roles: string;
  requesterId: string;
};

function UserShowState(props: PropsType) {
  const [userData, setUserData] = useState<Omit<UserData, "avatar">>({
    name: null,
    username: null,
    email: null,
    website: null,
    bio: null,
  });

  const [avatar, setAvatar] = useState<FieldInstance | null>(null);
  const [avatarSrc, setAvatarSrc] = useState<string | null>(null);

  // Fetch user PII from privy on component mount
  useEffect(() => {
    // For the purpose of this demo, clients tell the server who the requester
    // is and what roles they have. However, in real-world settings, the server
    // would assign permissions / roles appropriately based on the currently
    // logged in user and what access they should have.
    const privy = buildClient(props.requesterId, props.roles);

    async function fetchDataFromPrivy() {
      try {
        const [name, username, email, website, bio] = await privy.get(
          props.userId,
          ["name", "username", "email", "website", "bio"]
        );

        setUserData({
          name,
          username,
          email,
          website,
          bio,
        });

        const avatar = await privy.getFile(props.userId, "avatar");
        setAvatar(avatar);
      } catch (error) {
        console.log(error);
      }
    }

    fetchDataFromPrivy();
  }, []);

  // Construct the avatar url when the avatar value changes
  useEffect(() => {
    if (!avatar) {
      return;
    }

    const src = URL.createObjectURL(avatar.blob());
    setAvatarSrc(src);

    // Cleanup image url after use
    return () => URL.revokeObjectURL(src);
  }, [avatar]);

  return (
    <UserShow userId={props.userId} userData={userData} avatarSrc={avatarSrc} />
  );
}

function UserShow(props: {
  userId: string;
  userData: Omit<UserData, "avatar">;
  avatarSrc: string | null;
}) {
  const router = useRouter();

  const { name, username, email, website, bio } = props.userData;

  return (
    <div>
      <Head>
        <title>Privy Demo - User {props.userId}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <header>
          <h1>Privy Demo</h1>
          <nav>
            <a href="/">Home</a>
          </nav>
        </header>

        <div className="page-header">
          <div className="avatar">
            {props.avatarSrc != null ? (
              <img src={props.avatarSrc} />
            ) : (
              <Image
                src="/avatar_placeholder.png"
                alt="Avatar"
                width={100}
                height={100}
              />
            )}
          </div>
          <h2 className="title">User {props.userId}</h2>
        </div>

        <div>
          <div className="privy-field-group">
            <div className="privy-field">
              <strong>Name</strong>
              <p>{name && name.text()}</p>
            </div>
            <div className="privy-field">
              <strong>Username</strong>
              <p>{username && username.text()}</p>
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field">
              <strong>Email</strong>
              <p>{email && email.text()}</p>
            </div>
            <div className="privy-field">
              <strong>Website</strong>
              <p>{website && website.text()}</p>
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field-full">
              <strong>Bio</strong>
              <p>{bio && bio.text()}</p>
            </div>
          </div>
        </div>

        <div className="privy-field-group">
          <button
            className="button"
            onClick={(e) => {
              e.preventDefault();
              router.push(
                `/users/${props.userId}/edit${window.location.search}`
              );
            }}
          >
            Edit
          </button>
        </div>
      </main>
    </div>
  );
}

function UserShowPage(props: any) {
  const router = useRouter();
  const id = router.query.id;
  if (typeof id === "string") {
    return (
      <UserShowState
        {...props}
        userId={id}
        requesterId={router.query.requester_id}
        roles={router.query.roles}
      />
    );
  } else {
    return null;
  }
}

export default UserShowPage;
