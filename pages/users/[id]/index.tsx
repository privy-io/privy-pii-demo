import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import { buildClient } from "../../../privy-client";
import { formatUserData, UserData, UserDataResponse } from "../../../shared";
import { UserData as PrivyUserData, PrivyError, Session } from "privy-js";
import { SignOutLink, useSession } from "../../../components/session";

const NA = "N/A";

type PropsType = {
  userId: string;
  roles: string;
  requesterId: string;
};

function UserShowState(props: PropsType) {
  const session = useSession() as Session;

  const [userData, setUserData] = useState<UserData>({});
  const [avatar, setAvatar] = useState<Blob | null>(null);
  const [avatarSrc, setAvatarSrc] = useState<string | null>(null);

  function updateUserData(data: Partial<UserData>) {
    setUserData({ ...userData, ...data });
  }

  // Fetch user PII from privy on component mount
  useEffect(() => {
    // For the purpose of this demo, clients tell the server who the requester
    // is and what roles they have. However, in real-world settings, the server
    // would assign permissions / roles appropriately based on the currently
    // logged in user and what access they should have.
    const privy = buildClient(session);

    const onFetchDataSuccess = async (userDataResponse: PrivyUserData[]) => {
      const userData = formatUserData(userDataResponse as UserDataResponse[]);

      updateUserData(userData);

      if (userData.avatar) {
        // Download and decrypt the avatar image contents
        try {
          // userData.avatar is the file id of the uploaded avatar
          const avatarFileId = userData.avatar;
          const blob = await privy.download(
            props.userId,
            "avatar",
            avatarFileId
          );
          setAvatar(blob);
        } catch (e) {
          console.log(e);
        }
      }
    };

    const onFetchDataFailure = (error: PrivyError) => {
      console.log(error);
    };

    privy.fetchData(props.userId).then(onFetchDataSuccess, onFetchDataFailure);
  }, []);

  // Construct the avatar url when the avatar value changes
  useEffect(() => {
    if (!avatar) {
      return;
    }

    const src = URL.createObjectURL(avatar);
    setAvatarSrc(src);

    // Cleanup image url after use
    return () => URL.revokeObjectURL(src);
  }, [avatar]);

  return (
    <UserShow userId={props.userId} userData={userData} avatarSrc={avatarSrc} />
  );
}

function UserShow(props: {
  userId: string;
  userData: UserData;
  avatarSrc: string | null;
}) {
  const router = useRouter();

  return (
    <div>
      <Head>
        <title>Privy Demo - User {props.userId}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <header>
          <h1>Privy Demo</h1>
          <nav>
            <a href="/">Home</a>
            <SignOutLink />
          </nav>
        </header>

        <div className="page-header">
          <div className="avatar">
            {props.avatarSrc != null ? (
              <img src={props.avatarSrc} />
            ) : (
              <Image
                src="/avatar_placeholder.png"
                alt="Avatar"
                width={100}
                height={100}
              />
            )}
          </div>
          <p className="title is-6">User {props.userId}</p>
        </div>

        <div>
          <div className="privy-field-group">
            <div className="privy-field">
              <strong>Name</strong>
              <p>{props.userData.name || NA}</p>
            </div>
            <div className="privy-field">
              <strong>Username</strong>
              <p>{props.userData.username || NA}</p>
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field">
              <strong>Email</strong>
              <p>{props.userData.email || NA}</p>
            </div>
            <div className="privy-field">
              <strong>Website</strong>
              <p>{props.userData.website || NA}</p>
            </div>
          </div>

          <div className="privy-field-group">
            <div className="privy-field-full">
              <strong>Bio</strong>
              <p>{props.userData.bio || NA}</p>
            </div>
          </div>
        </div>

        <div className="privy-field-group">
          <button
            className="button"
            onClick={(e) => {
              e.preventDefault();
              router.push(
                `/users/${props.userId}/edit${window.location.search}`
              );
            }}
          >
            Edit
          </button>
        </div>
      </main>
    </div>
  );
}

function UserShowPage(props: any) {
  const router = useRouter();
  const id = router.query.id;
  if (typeof id === "string") {
    return (
      <UserShowState
        {...props}
        userId={id}
        requesterId={router.query.requester_id}
        roles={router.query.roles}
      />
    );
  } else {
    return null;
  }
}

export default UserShowPage;
